{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setstate","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACE,4BAAKL,GACL,2BAAIC,MCKHK,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAElF,OACG,6BACKO,ICMGK,EAbG,SAAC,GAAgC,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC9B,OACI,yBAAKZ,UAAU,OACX,2BACAA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCPI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAClEJ,EAAMK,WCiBAC,E,YAnBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAIvB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKX,MAAMK,a,GAhBCQ,aC8CZC,G,kBAvCX,aAAc,IAAD,8BACT,+CAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEvB,YAAasB,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACTpB,OAAQ,GACRO,YAAY,IAJP,E,iFASQ,IAAD,OAChB0B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKP,SAAS,CAAC9B,OAAOqC,S,+BAM9B,IAAD,EAC+Bb,KAAKJ,MAA7BpB,EADP,EACOA,OAAQO,EADf,EACeA,YACV+B,EAAiBtC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASnC,EAAYkC,kBAEzD,OAAQzC,EAAO2C,OAGV,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACG,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQsC,OAP9B,2C,GAzBEZ,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACO,kBAAC,EAAD,MACMC,SAASC,eAAe,SDyHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.aa622acb.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shaow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\n            <div>\n              <h2>{name}</h2>\n              <p>{email}</p>\n            </div>\n        </div> \n             \n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map((user, i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n    })\n    return (\n       <div>\n           {cardComponent}\n       </div>\n    );\n}\n\nexport default CardList;\n\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange})=> {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type=\"search\" \n            placeholder='search robots' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border:'1pz solid black', height:'500px'}}>\n        {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n     this.setstate({ hasError: true})\n    }\n\n    render () {\n        if(this.state.hasError) {\n            return <h1>Oops. That is not good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield:''\n        }\n    \n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(users =>this.setState({robots:users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n    render() {\n            const { robots, searchfield } = this.state;\n            const filteredRobots = robots.filter(robot =>{\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n            })\n            return !robots.length ?\n                <h1>Loading</h1> :\n            (\n                 <div className='tc'>\n                     <h1 className='f1'>Robofriends</h1>\n                     <SearchBox searchChange = {this.onSearchChange}/>\n                     <ErrorBoundry>\n                        <Scroll>\n                            <CardList robots={filteredRobots}/>\n                        </Scroll>\n                     </ErrorBoundry>\n                 </div>\n                );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n                <App />\n                    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}